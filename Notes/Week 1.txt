.NET - managed code
    - code runs in special runtime environment that auto handles low level stuff + crossplatform/os
    - inter-operablility - c# and f# can run together etc.
    - has automatic memory management
        - generazinal and tracing garbage collection
            - auto checking of references to free memory
    - everything is an object
        - possible exception of null
            - null default value for reference type vars
    - .NET Standard
        - shared libraries between .NET Core and .NET Framework and mono
        - makes code resusable in any implementation
            - for library projects not exes
    Implementations:
        - .NET Framework
            - last version 4.8
            - Older windows only, getting replaced by .NET Core
        - .NET Core
            - new redesigned and crossplatform
            - gonna be new and sole .NET 
        - Mono
            - older crossplatform .NET
            - uses its own mono runtime
            - used for mobile dev / unity for games
            - uses Ahead of time(AOT) compiling
OOP:
    - Inheritance: share code that several classes need
        - types:
            - direct Inheritance(is-a)
            - abstract base class (is-a)
            - composition/delegation (has-a)
                - Put shared code in class and create instance of class when needed to use shared code
                - use interfaces, follow dependency inversion principle
        - C# doesnt support multiple Inheritance
            - only 1 class, but can be multiple interfaces
        - Liskov Substitution Principle:
            - if anywhere you accept parameter type x, then it should also work if you pass derived type x
        - constructors can inherit from parent class constructors
            - ex "public person() : base(height)" - inherits height from a parent class constructor
            - parent class must have blank constructor and constructor with value to inherit
    - Abstraction: expose only functionality to caller
        - seperation between functionality and implementation
        - generalizing commons into classes/interfaces/abstract classes etc
    - Polymorphism: ability to substitute different implementations
        - Delegates to inject custom behavior into methods
        - Generics to allow for many different types to be used
        - implement same interface different ways
            - method overloading
                - multiple functions with same name but diff args/type - Compile time Polymorphism
            - override virtual methods
                - change inherited function but same name/args - Run time Polymorphism
    - Encapsulation: group of related data and behavior treated as a single unit or object
        - object would control access to its data

SOLID: Single-Responsibility, Open-Closed, Liskov-Substitution, Interface-Segregation, Dependency-Inversion
    - Single-Responsibility Principle
        - a class should only have 1 Responsibility
        - methods should be short and simple
    - Open/Closed Principle
        - Software should be open for extension but closed for modification
            - open : not sealed and allow Polymorphism  - closed : stable and not changing behavior or members
    - Liskov-Substitution Principle
        - if anywhere you accept parameter type x, then it should also work if you pass derived type x
    - Interface-Segregation Principle
        - many specific interfaces better than one big general purpose interface
    - Dependency-Inversion
        - should depend on abstractions not conctetions
            - have classes depend on interfaces instead of other classes

Testing:
    - Types : All manual or automated:
        - Unit Testing : Testing a single component/ smallest unit
        - Integration Testing : Testing multiple components together
        - System Testing : test the whole thing together
        - User-Acceptance Testing : evaluate from user pov
        - Function Testing : does app fulfill some function
    - Test Driven Development : 
        - Scaffold classes with skeleton code (just enough to compile)
        - write thorough unit tests for some of the code
        - write just enough code to make test pass

.Net Core Code Execution / Common Language Infrastructure(CLI) : source > build > run
    - Common Language Infrastructure(CLI) : the whole proccess from source to run
    - source code
        - project files
            - cs files and csproj files
    - dotnet build: compiles source into assembly
        - 1 project to 1 assembly
            - c# compiler turns source into dlls/assemblies
                - c# compiler calls MSBuild > Roslyn
        - assemblies become common intermediate language(CIL, MSIL, IL) instead of c# - still crossplatform
    - dotnet run / Virtual Execution System(VES) : compiles and runs assemblies
        - Virtual Execution System(VES) : virtual environment for assemblies to run so crossplatform
        - Just in Time(JIT) compiler compiles the assemblies into native instrcutions for CPU to run
        - Common Language Runtime(CLR) virtual machine component allows assemblies to be ran crossplatform
            - has standard .NET libraries - Base Class Library(BCL)
            - handles memory management (garbage collection)
            - handles exceptions, threads, data types

Version Control
    - VCS : Version Control System
        - Centralized : SVN - Subversion
        - Distributed : Git
    - SCM : Source Control Management

C# / Console Application:
    - project
        - cannot communicate even in same solution unless reference
            - one way project reference
                - reference in xml of csproj file
    - namespace
        - can commuinicate within project
    - runtime looks for a static method Main
    - class: a blueprint for creating objects
        - always has a parent class(" : object" by default)
    - method: sequence of statements that have inputs(args) and outputs(returns)
    - extension method: creating a static class with helper methods
        - add methods onto already existing objects
            - add this in from on paramters
                - ex (public static int WordCount(this String str))
                    - so now all string objects have wordcount method (string.WordCount())
    - variable: slot to contain a value
        - data types
            - Numerical
                - long : 8 bytes
                - *int : 4 bytes
                - short : 2 bytes
                - byte : 1 byte
            - fractional : doesnt have inf precision
                - *double : 8 bytes
                - float : 4 bytes
                - decimal : 16 bytes(best precision)
            - conditional
                - bool : true/false
            - strings : are unicode
                - char : one character
                - string : any num of chars
    - collections: containers
        - https://docs.microsoft.com/en-us/dotnet/standard/collections/
        - array
            - fixed size + data type
        - ArrayList
            - dynamic size
            - not locked to 1 data type
        - List<T>
            - felxible size and data type
        - HashSet
            - high performance
            - no duplicates, and elements in random order
        - Dictionary
            - <key>,<value>
            - no duplicate keys but can be duplicate values
            
    - reference vs value type:
        - reference type : heap + stack
            - address where value is stored
            - strings, arrays, delagates, etc.
            - upcasting a value to object boxes it in a refernce type container
        - value type : stack
            - has its own memory space
            - bool, char, decimal, int, etc.
            - can be on heap if tied to refernce object
            - downcasting from object to value type unboxes out of reference type
    - Interface
        - can contain methods and propteries
            - no implementation and no constructors or fields
        - all members have same access modifier as interface
        - cant implement interface to static methods
    - abstract class
    - delagates : assign reference methods to delagate variables
        - used to pass methods as parameters
    - events : notify subscribers everytime something happens
        - sends event(publisher), receives event(subscribers)
    - nullable value types
        - allows value to be null or filled
        - ? after data type assignment (bool?, int?)
    - serialization: get data outside of the CLR
        - when interacting with things outside of .NET
            - make class IDisposable
                - make sure to use a using statement or call dispose/close for garbage collection
            - make long running calls "async" if other work can be done in meantime
        - formats:
            - binary : space efficient but not human readable
                - protobuf, custom
            - text : human readable/writeable
                -csv, tsv, json, xml
    - Modifiers:
        - Abstract
            - create classes and members that are incomplete and must be implemented in dervived class
        - Const
            - value wont change
            - must assign value when delcaring
            - implicitly static
        - Readonly
            - more flexible const
            - dont have to provide a value right away
                - must be set by end of constructor
        - virtual
            - put on parent type to establish method override
        - ovveride
            - put on child type to establish method override
        - selaed
            - enforce no Inheritance from class
                - can also use it on method or property
                    - cant override that method
        - static
            - member will belong to type rather than object and can be called from class
                - MyClass.myFunction();
                    - dont have to make object to call
            - tied to class and can only reference other static things
        - partial
            - can create a class in multiple files 
                - partial keyword will auto put them together on compile
                - useful with code generation that might replace a entire file
    - variance
        - out
            - passes variable in method parametes and not vriables value
                - var doesnt have to be initialized
            - method must set some value to variable
        - ref
            - variable is being passed to method
                - variable must be initialized
        - in
            - passes reference to variable instead of value
                - variable cannot be changed in method



----------------------------------------------------
Topics:

Anatomy of Code (Language, Compiler, Runtime, Platform)
Environment Setup (IDE, Code Editor, Version Control, Chat)
Basic Topics (Core C#, Program Structure, Testing, Logging)
.NET Building Blocks (Framework, Standard, Core, Project, Solution, Assembly, Library, Application)
Common Language Runtime (BCL, CIL, CLI, CLR, CTS, JIT, VES)
Runtime Environment (Garbage Collection, Managed, Unmanaged)
Datatypes (Reference, Value)
Access Modifiers (Internal, Private, Protected, Public)
Extended Modifiers (Abstract, Const, New, Override, Partial, Readonly, Sealed, Static, Virtual)
Class (Constructor, Field, Method, Property, Reference Type)
Struct (Constructor, Field, Method, Property, Value Type)
Interface (Method, Property)
Enum (Collection)
Semantic Code (DRY, Comments-Inline, Comments-XML, KISS, Separation Of Concerns)
Object Oriented Programming (Abstraction, Encapsulation, Inheritance, Polymorphism)
Variance (As, Boxing, Casting, Is, Out, Ref, TypeOf)
Collections (Array, List, Data Structures, Dictionary, Generics)
Serialization (File I/O, Regular Expressions, Serializer-JSON, Serializer-Text, Serializer-XML)
Exception Handling (Catch, Custom Exceptions, Finally, Throw, Try)
Test Driven Development (Code-Coverage, Unit-Testing)
Application Debugging (Breakpoints, Debugger, Logging)
SOLID (Single-Responsibility, Open-Closed, Liskov-Substitution, Interface-Segregation, Dependency-Inversion)
Design Patterns (Creational-Singleton, Creational-Factory)
Delegates (Action, Event, Function, Lambda, LINQ, Predicate)
Multithreading (Async-Await, Task, Thread)
Git (Add, Commit, Log, Pull, Push, Status)

